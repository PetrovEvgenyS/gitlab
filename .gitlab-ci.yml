stages:
  - build     # Сборка образа приложения
  - test      # Тестирование приложения в контейнерах
  - cleanup   # Очистка ресурсов после тестов
  - push      # Публикация образа в реестр
  - deploy    # Развёртывание приложения в Kubernetes
  - rollback  # Ручной откат приложения к предыдущей версии при необходимости

# Переменные окружения, используемые во всех заданиях
variables:
  # Версия приложения
  APP_VERSION: v1.0
  K8S_API_URL: http://10.100.10.200:8443
  KUBE_NAMESPACE: app-namespace

build:
  stage: build
  script:
    # Сборка Docker-образа приложения с тегом, включающим версию и ID пайплайна
    # $CI_REGISTRY_IMAGE = gitlab.lan:5050/ben/quotegenerator
    # Пример образа: gitlab.lan:5050/ben/quotegenerator:v1.0.64
    - docker build -t $CI_REGISTRY_IMAGE:$APP_VERSION.$CI_PIPELINE_ID .

test:
  stage: test
  image:
    name: docker/compose:1.29.2 # Используем образ с docker-compose
    entrypoint: [""] # Сброс entrypoint для корректной работы
  script:
    # Запуск docker-compose с проектом, уникальным для пайплайна
    # --abort-on-container-exit : остановить все контейнеры при завершении любого
    # --exit-code-from test     : вернуть код выхода контейнера test
    # --quiet-pull              : минимизировать вывод при pull образов
    - echo $CI_PROJECT_NAME
    - docker-compose -p "$CI_PROJECT_NAME"_"$CI_PIPELINE_ID" up
      --abort-on-container-exit
      --exit-code-from test
      --quiet-pull

cleanup:
  stage: cleanup
  image:
    name: docker/compose:1.29.2
    entrypoint: [""] # Сброс entrypoint
  script:
    # Остановка и удаление всех контейнеров и ресурсов проекта
    - docker-compose -p "$CI_PROJECT_NAME"_"$CI_PIPELINE_ID" down
  when: always # Выполнять всегда, даже если предыдущие шаги завершились с ошибкой

push:
  stage: push
  before_script:
    # Аутентификация в реестре GitLab Container Registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    # Публикация собранного образа в реестр
    - docker push $CI_REGISTRY_IMAGE:$APP_VERSION.$CI_PIPELINE_ID
  only:
    - main # Выполнять только для ветки main

deploy:
  stage: deploy
  image: centosadmin/kubernetes-helm:3.17.2 # Образ с установленными kubectl и helm
  script:
    # Настройка kubectl: добавление кластера с пропуском проверки TLS и указанием адреса API сервера
    - kubectl config set-cluster k8s --insecure-skip-tls-verify=true --server=$K8S_API_URL
    # Добавление учётных данных (токена CI/CD) для подключения к кластеру
    - kubectl config set-credentials ci --token=$K8S_CI_TOKEN
    # Создание контекста, объединяющего кластер и пользователя
    - kubectl config set-context ci --cluster=k8s --user=ci
    # Активация созданного контекста для kubectl
    - kubectl config use-context ci
    # Установка (или обновление) Helm-релиза приложения
    - helm upgrade --install $CI_PROJECT_NAME .helm
      --namespace $KUBE_NAMESPACE
      --set deployment.container.image=$CI_REGISTRY_IMAGE
      --set deployment.container.tag=$APP_VERSION.$CI_PIPELINE_ID
      --wait
      --timeout 3m
      --atomic
      # --set deployment.container.image=$CI_REGISTRY_IMAGE           :  Переопределение docker-образа
      # --set deployment.container.tag=$APP_VERSION.$CI_PIPELINE_ID   :  Переопределение тега
      # --wait        : Ожидание завершения деплоя всех ресурсов
      # --timeout 3m  : Установка таймаута выполнения — 3 минуты
      # --atomic      : В случае ошибки — выполнить откат изменений

    # Вывод информации обо всех ресурсах в целевом namespace
    - echo "Проверка установленных ресурсов в Kubernetes:"
    - kubectl get all -n $KUBE_NAMESPACE
    - helm list -n $KUBE_NAMESPACE

  only:
    - main # Выполняется только для ветки main
  dependencies:
    - push # Запускается только если успешно выполнен этап push

rollback:
  stage: rollback
  image: centosadmin/kubernetes-helm:3.17.2 # Образ с установленными kubectl и helm
  script:
    - kubectl config set-cluster k8s --insecure-skip-tls-verify=true --server=$K8S_API_URL
    - kubectl config set-credentials ci --token=$K8S_CI_TOKEN
    - kubectl config set-context ci --cluster=k8s --user=ci
    - kubectl config use-context ci
    - helm rollback $CI_PROJECT_NAME 0
      --namespace $KUBE_NAMESPACE
      --wait
      --timeout 3m
  only:
    - main # Выполняется только для ветки main
  when: manual